DELIMITER $$
USE `Linder`$$
CREATE PROCEDURE `sp_getLaptopByUser` (
IN p_user_id int(11)
)
BEGIN
    select * from laptops where owner = p_user_id;
END$$
 
DELIMITER ;

        
DELIMITER $$
USE `Linder`$$

CREATE PROCEDURE `sp_getLaptopBySpec` (
IN p_laptop_model text,
IN p_laptop_processor text,
IN p_laptop_ram int(10),
IN p_laptop_storage int(10),
IN p_laptop_extra_info text
)

BEGIN
    select * from laptops
    where model = p_laptop_model and processor = p_laptop_processor and ram = p_laptop_ram and storage = p_laptop_storage;
END$$
 
DELIMITER ;


CREATE TABLE user (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    name text,
	username text NOT NULL,    
	email text,
    mobile text,
    ismobilevisible boolean DEFAULT FALSE, 
    password text NOT NULL );
    

###############################################

CREATE TABLE laptops (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    owner int(11) NOT NULL,
    model text,
	processor text NOT NULL,    
	ram INT,
    storage INT,
    laptopcondition text, 
    price INT,
    additional text NOT NULL );
    
####################################################################

INSERT INTO user  VALUES ("123","Muntasir","immuntasir@gmail.com","01521487023",FALSE, "hahaha");

##############################################

DROP procedure IF EXISTS sp_addLaptop;
DELIMITER $$
USE `Linder`$$
CREATE PROCEDURE `sp_addLaptop` (
IN pp_owner int(11),
IN p_laptop_model text,
IN p_laptop_processor text,
IN p_laptop_ram int(10),
IN p_laptop_storage int(10),
IN p_laptopccondition text,
IN p_laptop_price int(10),
IN p_laptop_extra_info text
)
BEGIN
	insert into laptops(
		owner,
		model,
		processor,
		ram,
		storage,
		laptopcondition,
		price,
		additional	
	)
	values(
		pp_owner,
		p_laptop_model,
		p_laptop_processor,
		p_laptop_ram,
		p_laptop_storage,
		p_laptopccondition,
		p_laptop_price,
		p_laptop_extra_info	
	);
END$$
 
DELIMITER ;


########################################################################

DROP procedure IF EXISTS sp_addMobile;
DELIMITER $$
USE `Linder`$$
CREATE PROCEDURE `sp_addMobile` (
IN pp_owner int(11),
IN p_laptop_model text,
IN p_laptop_processor text,
IN p_laptop_ram int(10),
IN p_laptop_storage int(10),
IN p_camera int(10),
IN p_laptop_price int(10),
IN p_laptop_extra_info text
)
BEGIN
	insert into mobiles(
		owner,
		model,
		processor,
		ram,
		storage,
		camera,
		price,
		additional	
	)
	values(
		pp_owner,
		p_laptop_model,
		p_laptop_processor,
		p_laptop_ram,
		p_laptop_storage,
		p_camera,
		p_laptop_price,
		p_laptop_extra_info	
	);
END$$
 
DELIMITER ;
########################################################################


########################################################################
DROP procedure IF EXISTS sp_getDeviceByUser;
DELIMITER $$
USE `Linder`$$
CREATE PROCEDURE `sp_getDeviceByUser` (
IN p_user_id int(11)
)
BEGIN
    (select *, 0 from mobiles where owner = p_user_id) union (select *, 1 from laptops where owner = p_user_id);
END$$
 
DELIMITER ;
#######################################################################
DROP procedure IF EXISTS sp_getMobileByUser;
DELIMITER $$
USE `Linder`$$
CREATE PROCEDURE `sp_getMobileByUser` (
IN p_user_id int(11)
)
BEGIN
    select * from mobiles where owner = p_user_id;
END$$
 
DELIMITER ;

CALL sp_createUser('haha', 'haa', 'haha', '1421', 0, 'asfas', 12.24, 12.12);
########################################################################
owner,model,processor,ram,
		storage,camera,price,additional
#######################################################################################
DROP procedure IF EXISTS sp_createLaptop;
DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_createLaptop`(
    IN p_owner int(11),
	IN p_model text,
	IN p_processor text,
	IN p_ram int(10),	
	IN p_storage int(10),
    IN p_price int(10),
    IN p_additional text
)
BEGIN
     
        insert into laptops
        (
            owner,
		    model,
		    processor,
		    ram,
		    storage,
		    price,
		    additional
        )
        values
        (
            p_owner,
		    p_model,
		    p_processor,
		    p_ram,
		    p_storage,
		    p_price,
		    p_additional
        );
     
    
END$$
DELIMITER ;
#################################################################################
DROP procedure IF EXISTS sp_createMobile;
DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_createMobile`(
    IN p_owner int(11),
	IN p_model text,
	IN p_processor text,
	IN p_ram int(10),	
	IN p_storage int(10),
    IN p_camera int(10),
    IN p_price int(10),
    IN p_additional text
)
BEGIN
   
        insert into mobiles
        (
            owner,
		    model,
		    processor,
		    ram,
		    storage,
		    camera,
		    price,
		    additional
        )
        values
        (
            p_owner,
		    p_model,
		    p_processor,
		    p_ram,
		    p_storage,
		    p_camera,
		    p_price,
		    p_additional
        );
     
    
END$$
DELIMITER ;
########################################################################
DROP procedure IF EXISTS sp_createUser;
DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_createUser`(
    IN p_name text,
	IN p_email text,
	IN p_username text,
	IN p_mobile text,	
	IN p_usertype tinyint(1),
    IN p_password text,
    IN p_latitude FLOAT(11, 8),
    IN p_longitude FLOAT(11, 8)
)
BEGIN
    if ( select exists (select 1 from user where username = p_username) ) THEN
         select 'Username Exists !!';  
    ELSE
     
        insert into user
        (
            name,
            username,
			email,
		    mobile,
			usertype,
            password,
            latitude,
            longitude
        )
        values
        (
            p_name,
            p_username,
			p_email,
		    p_mobile,
			p_usertype, 
            p_password,
            p_latitude,
            p_longitude
        );
     
    END IF;
END$$
DELIMITER ;

signin : 

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_validateLogin`(
IN p_username text,
IN p_password text
)
BEGIN
    select * from user where email = p_username and password=p_password;
END$$
DELIMITER ;

########################################################################



########################################################################

###################################################################
###
###
###
###################################################################

CREATE TABLE mobiles (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    owner int(11) NOT NULL,
    model text,
	processor text NOT NULL,    
	ram INT,
    storage INT,
    camera INT, 
    price INT,
    additional text NOT NULL );
    
#####################################################################


ALTER TABLE user
ADD COLUMN latitude FLOAT(7,7) AFTER password;
ALTER TABLE user
ADD COLUMN longitude FLOAT(7,7) AFTER password;


ALTER TABLE user 
CHANGE COLUMN ismobilevisible usertype tinyint(1);

ALTER TABLE user 
CHANGE COLUMN latitude latitude FLOAT(11, 8);

ALTER TABLE user 
CHANGE COLUMN longitude longitude FLOAT(11, 8);


#####################################################################

DELIMITER $$
USE `Linder`$$
DROP PROCEDURE IF EXISTS sp_getLaptopBySpecs;
CREATE PROCEDURE `sp_getLaptopBySpecs` (
IN MODELIN text,
IN PROCESSORIN text,
IN RAMIN INT,
IN storageIN INT,
IN priceIN INT
)
BEGIN
    CREATE TEMPORARY TABLE tempTable as(
        select laptops.*, (1*(MODEL=MODELIN)
        +1*(PROCESSOR>=PROCESSORIN)
        +1*(RAM>=RAMIN)
        +1*(storage>=STORAGEIN)
        +3*(PRICE<=PRICEIN)
        
        ) as priority
        from laptops
    );
    select * from tempTable 
    where Priority > 0
    order by Priority DESC;
    DROP TEMPORARY TABLE tempTable;
END$$
DELIMITER ;


######################################################################

ALTER TABLE user ADD UNIQUE KEY `uk_user_email` (email(50));

#####################################################################

ALTER TABLE laptops ADD CONSTRAINT fk_owner FOREIGN KEY (owner) REFERENCES user(id);

#####################################################################

ALTER TABLE mobiles ADD CONSTRAINT fk_mobile_owner FOREIGN KEY (owner) REFERENCES user(id);

#####################################################################

CREATE TABLE laptop_subscriptions (
	userID INT NOT NULL,
	laptopID INT NOT NULL,
	PRIMARY KEY(userID, laptopID),
	FOREIGN KEY (userID) REFERENCES user(id),
	FOREIGN KEY (laptopID) REFERENCES laptops(id)	
);

#####################################################################


CREATE TABLE mobile_subscriptions (
	userID INT NOT NULL,
	mobileID INT NOT NULL,
	PRIMARY KEY(userID, mobileID),
	FOREIGN KEY (userID) REFERENCES user(id),
	FOREIGN KEY (mobileID) REFERENCES mobiles(id)	
);

#####################################################################


DELIMITER $$
USE `Linder`$$
CREATE PROCEDURE `sp_addLaptopSubscription` (
IN USERIDIN INT,
IN LAPTOPIDIN INT
)
BEGIN
    insert into laptop_subscriptions values (USERIDIN, LAPTOPIDIN);
END$$
DELIMITER ;

#####################################################################


DELIMITER $$
USE `Linder`$$
CREATE PROCEDURE `sp_addMobileSubscription` (
IN USERIDIN INT,
IN MOBILEIDIN INT
)
BEGIN
    insert into mobile_subscriptions values (USERIDIN, MOBILEIDIN);
END$$
DELIMITER ;

#####################################################################

DELIMITER $$
USE `Linder`$$
CREATE PROCEDURE `sp_getSubsriptionsByLaptopID` (
IN LAPTOPIDIN INT
)
BEGIN
    select userID from laptop_subscriptions where laptopID=LAPTOPIDIN;
END$$
DELIMITER ;


#####################################################################

DELIMITER $$
USE `Linder`$$
CREATE PROCEDURE `sp_getSubsriptionsByMobileID` (
IN MobileIDIN INT
)
BEGIN
    select userID from mobile_subscriptions where mobileID=MobileIDIN;
END$$
DELIMITER ;


#####################################################################


DELIMITER $$
USE `Linder`$$
DROP PROCEDURE IF EXISTS sp_deleteLaptopSubscription;
CREATE PROCEDURE `sp_deleteLaptopSubscription` (
IN LAPTOPIDIN INT
)
BEGIN
     DELETE FROM laptop_subscriptions WHERE laptopIDIN=laptopID;
END$$
DELIMITER ;


#####################################################################


DELIMITER $$
USE `Linder`$$
DROP PROCEDURE IF EXISTS sp_deleteMobileSubscription;
CREATE PROCEDURE `sp_deleteMobileSubscription` (
IN MOBILEIDIN INT
)
BEGIN
     DELETE FROM mobile_subscriptions WHERE mobileIDIN=mobileID;
END$$
DELIMITER ;

#####################################################################

DELIMITER $$
USE `Linder`$$
CREATE PROCEDURE `sp_updateLaptop` (
IN p_laptop_id int,
IN p_user_id int(11)
IN p_laptop_model text,
IN p_laptop_processor text,
IN p_laptop_ram int(10),
IN p_laptop_storage int(10),
IN p_laptopccondition text,
IN p_laptop_price int(10),
IN p_laptop_extra_info text
)
BEGIN
     UPDATE Laptops SET owner=p_user_id, 
	model=p_laptop_model, 
	processor=p_laptop_processor, 
	ram=p_laptop_ram, 
	storage=p_laptop_storage, 
	laptopcondition=p_laptopcondition, 
	price=p_laptop_price, 
	additional=p_laptop_extra_info  
	WHERE p_laptop_id=id;
END$$
DELIMITER ;

#####################################################################

DELIMITER $$
USE `Linder`$$
CREATE PROCEDURE `sp_updateMobile` (
IN p_mobile_id int,
IN p_user_id int(11),
IN p_mobile_model text,
IN p_mobile_processor text,
IN p_mobile_ram int(10),
IN p_mobile_storage int(10),
IN p_mobilecondition text,
IN p_mobile_price int(10),
IN p_mobile_extra_info text
)
BEGIN
     UPDATE Mobiles SET 
	owner=p_user_id, 
	model=p_mobile_model, 
	processor=p_mobile_processor, 
	ram=p_mobile_ram, 
	storage=p_mobile_storage, 
	laptopcondition=p_mobilecondition, 
	price=p_mobile_price, 
	additional=p_mobile_extra_info  
	WHERE p_mobile_id=id;
END$$
DELIMITER ;

######################################################################

DELIMITER $$
USE `Linder`$$
CREATE PROCEDURE `sp_deleteMobile` (
IN p_mobile_id int
)
BEGIN
	DELETE FROM mobile_subscriptions WHERE p_mobile_id=mobileID;
END$$
DELIMITER ;

######################################################################

DELIMITER $$
USE `Linder`$$
CREATE PROCEDURE `sp_deleteLaptop` (
IN p_laptop_id int
)
BEGIN
	DELETE FROM laptops WHERE p_laptop_id=ID;
END$$
DELIMITER ;

######################################################################

DELIMITER $$
USE `Linder`$$
DROP procedure IF EXISTS sp_getLaptopRecommendation;
CREATE PROCEDURE `sp_getLaptopRecommendation` (
IN p_user_id int
)
BEGIN
	CREATE TEMPORARY TABLE tempTable as(
        	select *, (
 		    select COUNT(*)
		    FROM laptop_subscriptions
		    GROUP BY laptopID
		    HAVING laptop_subscriptions.laptopID=id
		) as priority
       		from laptops
		where owner!=p_user_id
    	);
	select * from tempTable 
        order by priority DESC;
        DROP TEMPORARY TABLE tempTable;
END$$
DELIMITER ;

######################################################################

DELIMITER $$
USE `Linder`$$
DROP procedure IF EXISTS sp_getMobileRecommendation;
CREATE PROCEDURE `sp_getMobileRecommendation` (
IN p_user_id int
)
BEGIN
	CREATE TEMPORARY TABLE tempTable as(
        	select *, (
 		    select COUNT(*)
		    FROM mobile_subscriptions
		    GROUP BY mobileID
		    HAVING mobile_subscriptions.mobileID=id
		) as priority
       		from mobiles
		where owner!=p_user_id
    	);
	select * from tempTable 
        order by priority DESC;
        DROP TEMPORARY TABLE tempTable;
END$$
DELIMITER ;

######################################################################


DELIMITER $$
USE `Linder`$$
DROP procedure IF EXISTS sp_getSubscribedUsersMobile;
CREATE PROCEDURE `sp_getSubscribedUsersMobile` (
IN p_dev_id int
)
BEGIN
	select A.email
	from (select * from mobile_subscriptions, user
          where user.id=mobile_subscriptions.userid) as A
    where A.mobileID = p_dev_id;
END$$
DELIMITER ;


######################################################################


DELIMITER $$
USE `Linder`$$
DROP PROCEDURE IF EXISTS sp_deleteMobile;
CREATE PROCEDURE `sp_deleteMobile` (
IN MOBILEIDIN INT
)
BEGIN
     DELETE FROM mobiles WHERE MOBILEIDIN=ID;
END$$
DELIMITER ;

######################################################################

DELIMITER $$
USE `Linder`$$
DROP procedure IF EXISTS sp_getSubscribedUsersLaptop;
CREATE PROCEDURE `sp_getSubscribedUsersLaptop` (
IN p_dev_id int
)
BEGIN
	select A.email
	from (select * from laptop_subscriptions, user
          where user.id=laptop_subscriptions.userid) as A
    where A.laptopID = p_dev_id;
END$$
DELIMITER ;
